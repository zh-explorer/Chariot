from ..util import Context
from ..db import ChallengeInst, Flag, FlagStatus
from .exp_manager2 import ExpManager
from ..executor import ExpRunner, FlagSubmitter


class ExploitScheduler:
    def __init__(self, inst_id, round_count, runner_queue, flag_queue):
        self.inst_id = inst_id
        self.round = round_count
        self.runner_queue = runner_queue
        self.flag_queue = flag_queue

        # get exp and sorted it
        session = Context.db.get_session()
        inst = session.query(ChallengeInst).filter(ChallengeInst.id == inst_id).one()
        self.challenge_name = inst.challenge.name
        self.team_name = inst.team.name
        session.commit()
        session.close()

        self.exp_manage = ExpManager(self.challenge_name)
        self.stopped = False
        self.success = False
        self.task_wait = False
        self.run_all = False

    def run_new_one(self):
        # if this inst has a flag wait to submit, not run a new one
        session = Context.db.get_session()
        inst = session.query(ChallengeInst).filter(ChallengeInst.id == self.inst_id).one()
        for i in inst.flags:
            if i.submit_status == FlagStatus.wait_submit:
                return

        exp = self.exp_manage.exp_iter()
        if exp:
            runner = ExpRunner(exp.name, exp.entry, self.inst_id, self.runner_queue, self, exp.timeout)
            runner.start()
            self.task_wait = True
        else:
            self.run_all = True

    def start(self):
        self.run_new_one()

    def task_update(self, log_id, get_flag):
        self.task_wait = False
        if not get_flag and not self.stopped and not self.success:
            self.run_new_one()
        # if get flag or stopped, do not run new exploit

    def exp_modify(self):
        if self.stopped or self.success:
            # not need to update
            return
        self.exp_manage.check_exp_update()

    def flag_submitted(self, flag_id):
        session = Context.db.get_session()
        flag = session.query(Flag).filter(Flag.id == flag_id).one()
        if flag.submit_status == FlagStatus.submit_success:
            # not need run new task
            self.success = True
            return
        session.commit()
        session.close()

        # the task wait will be true when a duplicate flag submit failed
        if not self.stopped and not self.task_wait:
            self.run_new_one()

    def stop(self):
        self.stopped = True

    def renew(self):
        if self.run_all:
            self.exp_manage = ExpManager(self.challenge_name)
            self.run_new_one()
